import db

#####################################################################################
# INSTRUCTIONS:                                                                     #
# Download & setup postgresql db                                                    #
# run postgresql db/local server                                                    #
# 'pip install psycopg2' or 'conda install psycopg2'                                #
# Update 'db_config.py' to your db name/db user                                     #
# create test table and populate it with data - in my case I used 'accounts' table  #
#   see 'test_data.png'                                                             #
# test different db commands using db.interact(...)                                 #
#####################################################################################

# CLI Infoâ€º
    # print("Simple command line interface")
    # choice = input("Would you like to see all accounts? 'y' or 'n''\n")

    # if choice == 'y':
    #     output = db.interact("SELECT * FROM premium;")
    #     print_tuples(output)

# SIGN IN SCREEN IDEA
    # Need to get curr_user: UserID of currently signed in user; used in queries

# Register Guest User

# Register Premium User

# Register Artist

# Sign in 
    # Possible implementation with password; else, just switch CLI view
    # Check for password correctness, then switch CLI view

#####################
# GENERAL FUNCTIONS #
#####################

# Prints table from the return value of a db.interact statement
def print_tuples(rows):
    for row in rows:
        for field in row:
                print(field, end='\t')
        print()

# Get current username from user
def signin():
    return input('Enter your username: ') # Need to error check in database



##########################
# PREMIUM USER FUNCTIONS #
##########################

# Follow an Artist by UserID
def follow(curr_user):
    follow_id = input('Follow user with username: ')
    db.interact(f'INSERT INTO follows VALUES(\'{curr_user}\', \'{follow_id}\');')

# View Artists Followed by User
def view_following(curr_user):
    output = db.interact(f'SELECT following FROM follows WHERE follower = \'{curr_user}\';')
    print_tuples(output)

# Like a Song by SongID
def like(curr_user):
    like_id = input('Like song with SongID: ')
    db.interact(f'INSERT INTO likes VALUES(\'{curr_user}\', {like_id});')

# View Liked Songs
def view_liked(curr_user):
    output = db.interact(f'SELECT title, createdby FROM likes NATURAL JOIN song WHERE username = \'{curr_user}\';')
    print_tuples(output)

# Create a Playlist
# Also used for Artists
def create_playlist(curr_user):
    # Note: Uses naive playlist_id method for project testing
    playlist_id = db.interact('SELECT COUNT(*) FROM userplaylist;') + 1
    title = input('Title: ')
    db.interact(f'INSERT INTO userplaylist VALUES ({playlist_id}, \'{title}\', 0, 0, \'{curr_user}\');')

# Add Song to a Playlist
# Also used for Artists
def add_song_userplaylist():
    into_id = input('Insert into playlist with ID: ')
    insert_id = input('Insert song with ID: ')
    db.interact(f'INSERT INTO userplaylistsongs VALUES ({into_id}, {insert_id});')
    song_length = db.interact(f'SELECT length FROM song WHERE songid = {insert_id};')
    playlist_length = db.interact(f'SELECT length FROM userplaylist WHERE playlistid = {into_id};')
    # Update playlist values (length, numsongs)
    db.interact(f'UPDATE userplaylist SET length = {song_length + playlist_length} WHERE playlistid = {into_id};')
    db.interact(f'UPDATE userplaylist SET numsongs = numsongs + 1 WHERE playlistid = {into_id};')

# View Playlists, choose a Playlist to view
def view_playlists(curr_user):
    output = db.interact(f'SELECT title FROM userplaylist WHERE creator = \'{curr_user}\';')
    print_tuples(output)



####################
# ARTIST FUNCTIONS #
####################

# View Followers
def view_followers(curr_user):
    output = db.interact(f'SELECT follower FROM follows WHERE following = \'{curr_user}\';')
    print_tuples(output)

# Create a Song
def create_song(curr_user):
    song_id = db.interact('SELECT COUNT(*) from song;') + 1
    song_title = input('Song title: ')
    length = input('Length: ')
    explicit = bool(input('Explicit (1 for True/0 for False): '))
    file_location = input('File location: ')
    db.interact(f'INSERT INTO song VALUES ({song_id}, \'{song_title}\', {length}, {explicit}, \'{file_location}\', \'{curr_user}\');')

# Create a Playlist
# Use create_playlist() function from Premium User

# Add Song to a Playlist
# User add_song_userplaylist() function from Premium User

# Create an Album
def create_album(curr_user):
    # Note: Uses naive album_id method for project testing
    album_id = db.interact('SELECT COUNT(*) FROM userplaylist;') + 100
    title = input('Title: ')
    record_label = input('Record label: ')
    type = input('')
    db.interact(f'INSERT INTO album VALUES ({album_id}, \'{title}\', 0, 0, \'{record_label}\', {type}, \'{curr_user}\');')

# Add Song to an Album
def add_song_album():
    into_id = input('Insert into album with ID: ')
    insert_id = input('Insert song with ID: ')
    db.interact(f'INSERT INTO albumsongs VALUES ({into_id}, {insert_id});')
    song_length = db.interact(f'SELECT length FROM song WHERE songid = {insert_id};')
    playlist_length = db.interact(f'SELECT length FROM album WHERE albumid = {into_id};')
    # Update playlist values (length, numsongs)
    db.interact(f'UPDATE album SET length = {song_length + playlist_length} WHERE albumid = {into_id};')
    db.interact(f'UPDATE album SET numsongs = numsongs + 1 WHERE albumid = {into_id};')



''' New SQL Additions - Cody'''

####################
# SEARCH FUNCTIONS #
####################


# search: all songs matching name
def find_song_by_name(name_string):
    # SELECT {attr} FROM song WHERE title LIKE '%k%';
    matches = db.interact(f'SELECT title, createdby FROM song WHERE title LIKE \'%{name_string}%\';')
    print_tuples(matches)

# search: all artists matching name
def find_artist_by_artist_name(artist_name):
    matches = db.interact(f'SELECT displayname FROM artist WHERE displayname LIKE \'%{artist_name}%\';')
    print_tuples(matches)

# search: all albums matching name
def find_album_by_name(album_name):
    matches = db.interact(f'SELECT title FROM album WHERE title LIKE \'%{album_name}%\';')
    print_tuples(matches)

# search: all playlists matching name 
def find_playlist_by_name(playlist_name):
    matches = db.interact(f'SELECT title FROM playlist WHERE title LIKE \'%{playlist_name}%\';')
    print_tuples(matches)
    
# search: all users matching name
def find_user_by_name(username):
    matches = db.interact(f'SELECT username FROM users WHERE username LIKE \'%{username}%\';')
    print_tuples(matches)

##########################
# SEARCH & MAP FUNCTIONS #
##########################

# Get all playlists from a user
def get_playlists_by_user(username):

    print('title, length, numsongs, creator')
    #SELECT title, length, numsongs, creator from userplaylist JOIN users ON creator=username WHERE creator = 'HaroldMusic';
    matches = db.interact(f'SELECT title, length, numsongs, creator from userplaylist JOIN users ON creator=username WHERE creator = \'{username}\'')
    print_tuples(matches)

# Get all songs from a playlist
def get_songs_from_playlstid(playlistid):

    matches = db.interact(f'SELECT title FROM song NATURAL JOIN userplaylistsongs WHERE playlistid = \'{playlistid}\'')
    print_tuples(matches)


# Get all albums by an artist
def get_albums_by_artist(artist_display_name):
    #SELECT displayname, title FROM album JOIN artist ON creator=username WHERE displayname = 'Blank Banshee';
    matches = db.interact(f"SELECT displayname, title FROM album JOIN artist ON creator=username WHERE displayname = '{artist_display_name}';")
    print_tuples(matches)

# get all songs by an artist
def get_song_by_artist(artist_display_name):
    #SELECT displayname, title FROM song JOIN artist ON creator=username WHERE displayname = '{artist_display_name}';
    matches = db.interact(f"SELECT displayname, title FROM song JOIN artist ON createdby=username WHERE displayname = '{artist_display_name}';")
    print_tuples(matches)

# Get all followers/following of an account
def get_user_followers(username):
    matches = db.interact(f"SELECT follower from follows WHERE following = '{username}';")
    print_tuples(matches)

# Get total followers for a given account
def get_follower_count(username):
    matches = db.interact(f"SELECT COUNT(*) FROM (SELECT * from follows WHERE following = '{username}') AS followlist;")
    print("Total followers: ", matches[0][0])


################
# TESTING AREA #
################
# def main():
#     curr_user = signin()
#     print('\nView following:')
#     view_following(curr_user)
#     print('\nView liked:')
#     view_liked(curr_user)
#     print('\nView playlists:')
#     view_playlists(curr_user)

''' New functions testing'''
# find_artist_by_artist_name("The Knife"))
# find_album_by_name("Pablo"))
# find_playlist_by_name("Yee")
# find_user_by_name("h")
# get_playlists_by_user('HaroldMusic')
# get_songs_from_playlstid('1')
# get_albums_by_artist('Blank Banshee')
# get_song_by_artist('The Knife')
# get_user_followers('KanyeWest')
# get_follower_count('KanyeWest')

# main()
# #print(find_song_by_name("k"))


